/*
Copyright (c) 2013, Pavlo Malynin
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. All advertising materials mentioning features or use of this software
   must display the following acknowledgement:
   This product includes software developed by the <organization>.
4. Neither the name of the <organization> nor the
   names of its contributors may be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Pavlo Malynin ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Watcher
{
    enum CompilerType
    {
        Assembly, CPP, C
    }
    class ObjectTuple
    {
        public CompilerType Compiler { get; set; }
        public string ObjectFile { get; set; }
        public string SourceFile { get; set; }
    }
    class Makefile
    {
        StringBuilder makefile;
        public Makefile()
        {

        }

        private void AddDefinition(string name, string value)
        {
            makefile.AppendFormat("{0} := {1}\n", name, value);
        }

        public static string TransformSourcePath(string path, FileInfo info)
        {
            int pathLength = path.Length + 6;

            string objectFileName = info.Name.Split('.')[0];
            string transformed = info.DirectoryName.Remove(0, pathLength) + string.Format("/{0}", objectFileName);
            transformed = transformed.Replace('\\', '/'); //Transform path back to unix, if anything happened
            return transformed;
        }

        public void Create(string path)
        {
            string unixPath = path;
            unixPath = unixPath.Replace(":", "");
            unixPath = unixPath.ToLower();
            unixPath = "/cygdrive/" + unixPath.Replace('\\', '/');
            if (unixPath.Last() != '/')
            {
                unixPath += '/';
            }
            Console.WriteLine("Creating makefile headers...");

            makefile = new StringBuilder();
            makefile.Append("# Generated by Hydra Makefile Generator\n\n");
            AddDefinition(".DEFAULT_GOAL", "kernel.bin");
            AddDefinition("TARGET", "i586-elf-");
            AddDefinition("PATH", "/cygdrive/c/gcc/bin:/cygdrive/c/cygwin/bin");
            AddDefinition("PATH_OUT", "/cygdrive/g/");
            AddDefinition("LD_FLAGS", string.Format("-T {0}linker.ld", unixPath));
            if (Program.Options["ggdb"])
            {
                AddDefinition("CC_FLAGS", "-ggdb -Wall -MMD -Wextra  -nostdlib -fno-builtin -nostartfiles -nodefaultlibs -fno-stack-protector -O2 -fleading-underscore -c -fpermissive -I source/");
                AddDefinition("CPPC_FLAGS", "-ggdb -Wall -MMD -Wextra  -nostdlib -fno-builtin -nostartfiles -nodefaultlibs -fno-exceptions -fno-rtti -fno-stack-protector -O2 -fleading-underscore -c -fpermissive -I source/");
            }
            else
            {
                AddDefinition("CC_FLAGS", "-Wall -MMD -Wextra  -nostdlib -fno-builtin -nostartfiles -nodefaultlibs -fno-stack-protector -O2 -fleading-underscore -c -fpermissive -I source/");
                AddDefinition("CPPC_FLAGS", "-Wall -MMD -Wextra  -nostdlib -fno-builtin -nostartfiles -nodefaultlibs -fno-exceptions -fno-rtti -fno-stack-protector -O2 -fleading-underscore -c -fpermissive -I source/");

            }
            AddDefinition("CC", "$(TARGET)gcc");
            AddDefinition("CPPC", "$(TARGET)g++");
            AddDefinition("ASM_FLAGS", "-f elf");
            AddDefinition("ASM_CC", "/cygdrive/c/cygwin/bin/nasm");
            Dictionary<CompilerType, string> compilerStrings = new Dictionary<CompilerType, string>();
            compilerStrings.Add(CompilerType.C, "$(CC) -o $@ $< $(CC_FLAGS)\n");
            compilerStrings.Add(CompilerType.CPP, "$(CPPC) -o $@ $< $(CPPC_FLAGS)\n");
            compilerStrings.Add(CompilerType.Assembly, "$(ASM_CC) -o $@ $< $(ASM_FLAGS)\n");

            Console.WriteLine("Collecting build files...");

            DirectoryInfo info = new DirectoryInfo(path);
            DirectoryInfo sourceInfo;
            try
            {
                sourceInfo = info.GetDirectories("source")[0];
            }
            catch
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Error: source folder not found.");
                Console.ResetColor();
                return;
            }

            DirectoryInfo objInfo;
            string obj_folder;
            if (Program.Options["temp"])
            {
                obj_folder = "/tmp/";
#if WINDOWS
                objInfo = new DirectoryInfo("C:/cygwin/tmp/");
#else
                objInfo = new DirectoryInfo("/tmp/");
#endif
            }
            else
            {
                try
                {
                    objInfo = info.GetDirectories("obj")[0];
                }
                catch
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("Error: obj folder not found.");
                    Console.ResetColor();
                    return;
                }
                obj_folder = "obj/";
            }


            FileInfo[] cppFiles = sourceInfo.GetFiles("*.cpp", SearchOption.AllDirectories);
            FileInfo[] asmFiles = sourceInfo.GetFiles("*.asm", SearchOption.AllDirectories);
            Console.WriteLine("Collection complete; transforming...");
            List<ObjectTuple> objectFiles = new List<ObjectTuple>(cppFiles.Length + asmFiles.Length);
            int pathLength = path.Length;
            //Add "source" length as well
            pathLength += 6;


            makefile.Append("OBJ_FILES := ");
            foreach (FileInfo file in cppFiles.Union(asmFiles))
            {
                string objectFileName = file.Name.Split('.')[0];
                string objectExtension = file.Extension.Remove(0, 1);
                string transformed = file.DirectoryName.Remove(0, pathLength) + string.Format("/{0}", objectFileName);
                transformed = transformed.Replace('\\', '/'); //Transform path back to unix, if anything happened
                if (transformed.First() == '/')
                {
                    transformed = transformed.Remove(0, 1);
                }

                //Create object folders, if they don't exist
                string[] splitTransform = transformed.Split('/');
                if (splitTransform.Length > 1)
                {
                    DirectoryInfo parent = objInfo;
                    for (int i = 0; i < splitTransform.Length - 1; i++)
                    {

                        parent = parent.CreateSubdirectory(splitTransform[i]);

                    }
                }
                ObjectTuple tuple = new ObjectTuple();
                switch (objectExtension)
                {
                    case "asm":
                        tuple.Compiler = CompilerType.Assembly;
                        break;
                    case "c":
                        tuple.Compiler = CompilerType.C;
                        break;
                    case "cpp":
                        tuple.Compiler = CompilerType.CPP;
                        break;
                }
                tuple.SourceFile = "source/" + transformed + '.' + objectExtension;

                tuple.ObjectFile = transformed = obj_folder + transformed + ".o";
                makefile.Append(transformed + ' ');
                objectFiles.Add(tuple);
            }
            makefile.Remove(makefile.Length - 1, 1); //"Remove last space
            makefile.Append("\n");
            AddDefinition("DEPS", "$(OBJ_FILES:.o=.d)");
            makefile.Append("-include $(DEPS)\n\n");
            makefile.Append("clean:\n\t/bin/rm -f $(OBJ_FILES) $(DEPS)\n\n");

            makefile.Append("kernel.bin: $(OBJ_FILES)\n");
            makefile.Append("\t$(TARGET)ld $(LD_FLAGS) -o kernel.bin $(OBJ_FILES)\n");
            makefile.Append("\t/bin/cp kernel.bin $(PATH_OUT)\n\n");

            Console.WriteLine("Creating final object:source tuples...");
            foreach (ObjectTuple tuple in objectFiles)
            {
                makefile.Append(tuple.ObjectFile);
                makefile.Append(": ");
                makefile.Append(tuple.SourceFile);
                makefile.Append("\n\t");
                makefile.Append(compilerStrings[tuple.Compiler]);
            }
            Console.WriteLine("Flushing...");
            FileStream mf = File.Open(info.FullName + "makefile", FileMode.Create);
            mf.Write(ASCIIEncoding.ASCII.GetBytes(makefile.ToString()), 0, makefile.Length);
            mf.Flush();
            mf.Close();
            mf.Dispose();
            Console.WriteLine("Done.");
        }
    }
}
